package com.zorm.jdbc;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;

import com.zorm.config.Settings;
import com.zorm.engine.LogicalConnectionImplementor;
import com.zorm.exception.AssertionFailure;

public class StatementPreparerImpl implements StatementPreparer {

	private JdbcCoordinatorImpl jdbcCoordinator;

	StatementPreparerImpl(JdbcCoordinatorImpl jdbcCoordinator) {
		this.jdbcCoordinator = jdbcCoordinator;
	}
	
	@Override
	public PreparedStatement prepareStatement(String sql) {
		return buildPreparedStatementPreparationTemplate( sql, false ).prepareStatement();
	}

	@Override
	public PreparedStatement prepareStatement(String sql, boolean isCallable) {
        jdbcCoordinator.executeBatch();
        return buildPreparedStatementPreparationTemplate( sql, isCallable ).prepareStatement();
	}

	private StatementPreparationTemplate buildPreparedStatementPreparationTemplate(String sql,
			final boolean isCallable) {
		return new StatementPreparationTemplate( sql ) {
			@Override
			protected PreparedStatement doPrepare() throws SQLException {
				return isCallable
						? connectionProxy().prepareCall( sql )
						: connectionProxy().prepareStatement( sql );
			}
		};
	}

	@Override
	public PreparedStatement prepareStatement(String sql, int autoGeneratedKeys) {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public PreparedStatement prepareStatement(String sql, String[] columnNames) {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public PreparedStatement prepareQueryStatement(String sql,
			final boolean isCallable, final ScrollMode scrollMode) {
		if ( scrollMode != null && !scrollMode.equals( ScrollMode.FORWARD_ONLY ) ) {
			if ( ! settings().isScrollableResultSetsEnabled() ) {
				throw new AssertionFailure("scrollable result sets are not enabled");
			}
			PreparedStatement ps = new QueryStatementPreparationTemplate( sql ) {
				public PreparedStatement doPrepare() throws SQLException {
						return isCallable
								? connectionProxy().prepareCall(
								sql, scrollMode.toResultSetType(), ResultSet.CONCUR_READ_ONLY
						)
								: connectionProxy().prepareStatement(
								sql, scrollMode.toResultSetType(), ResultSet.CONCUR_READ_ONLY
						);
				}
			}.prepareStatement();
			logicalConnection().getResourceRegistry().registerLastQuery( ps );
			return ps;
		}
		else{
		PreparedStatement ps = new QueryStatementPreparationTemplate( sql ) {
			public PreparedStatement doPrepare() throws SQLException {
					return isCallable
							? connectionProxy().prepareCall( sql )
							: connectionProxy().prepareStatement( sql );
			}
		}.prepareStatement();
		logicalConnection().getResourceRegistry().registerLastQuery( ps );
		return ps;
	  }
	}
	
	private abstract class QueryStatementPreparationTemplate extends StatementPreparationTemplate {
		protected QueryStatementPreparationTemplate(String sql) {
			super( sql );
		}

		public void postProcess(PreparedStatement preparedStatement) throws SQLException {
			super.postProcess( preparedStatement );
			setStatementFetchSize( preparedStatement );
		}
	}
	
	private void setStatementFetchSize(PreparedStatement statement) throws SQLException {
		if ( settings().getJdbcFetchSize() != null ) {
			statement.setFetchSize( settings().getJdbcFetchSize() );
		}
	}
	
	protected final Settings settings() {
		return jdbcCoordinator.sessionFactory().getSettings();
	}

	
	protected final SqlExceptionHelper sqlExceptionHelper() {
		return jdbcCoordinator.getTransactionCoordinator()
				.getTransactionContext()
				.getTransactionEnvironment()
				.getJdbcServices()
				.getSqlExceptionHelper();
	}
	
	protected final Connection connectionProxy() {
		return logicalConnection().getShareableConnectionProxy();
	}
	
	protected final LogicalConnectionImplementor logicalConnection() {
		return jdbcCoordinator.getLogicalConnection();
	}
	
	private abstract class StatementPreparationTemplate {
		protected final String sql;

		protected StatementPreparationTemplate(String sql) {
			this.sql = jdbcCoordinator.getTransactionCoordinator().getTransactionContext().onPrepareStatement( sql );
		}

		public PreparedStatement prepareStatement() {
			try {
				PreparedStatement preparedStatement = doPrepare();
				setStatementTimeout( preparedStatement );
				postProcess( preparedStatement );
				return preparedStatement;
			}
			catch ( SQLException e ) {
				throw sqlExceptionHelper().convert( e, "could not prepare statement", sql );
			}
		}

		protected abstract PreparedStatement doPrepare() throws SQLException;

		public void postProcess(PreparedStatement preparedStatement) throws SQLException {
		}

		private void setStatementTimeout(PreparedStatement preparedStatement) throws SQLException {
			final int remainingTransactionTimeOutPeriod = jdbcCoordinator.determineRemainingTransactionTimeOutPeriod();
			if ( remainingTransactionTimeOutPeriod > 0 ) {
				preparedStatement.setQueryTimeout( remainingTransactionTimeOutPeriod );
			}
		}
	}

}
